{
  "compilerOptions": {
    "target": "esnext",
    // 符合规范的类字段 开启：Define 关闭：Set
    "useDefineForClassFields": true,
    // 指定生成哪个模块系统代码
    "module": "esnext",
    // 决定如何处理模块
    "moduleResolution": "node",
    // 所有严格检查的总开关
    "strict": true,
    // 是否移除注释 默认: false
    "removeComments": true,
    // 不生成编译a后的文件
    "noEmit": false,
    // 当有错误时不编译 默认: false
    "noEmitOnError": true,
    // 是否开启严格模式 默认: false
    "alwaysStrict": true,
    // 不允许默认使用any类型 默认: false
    "noImplicitAny": false,
    // 不允许使用不明确的this 默认: false
    "noImplicitThis": false,
    // 严格检查空值
    "strictNullChecks": false,
    // jsx
    "jsx": "preserve",
    // 允许编译js文件
    "allowJs": true,
    // 生成相应的 .map文件
    "sourceMap": true,
    // 忽略所有的声明文件（ *.d.ts）的类型检查
    "resolveJsonModule": true,
    "esModuleInterop": true,
    // 启用实验性语法不报错
    "experimentalDecorators": true,
    // 编译过程中需要引入的库文件的列表
    "lib": ["esnext", "dom"],
    // 设置我们想要引入的types包
    "types": ["vite/client"],
    // 用来指定默认的类型声明文件查找路径
    "typeRoots": ["./node_modules/@types/", "./types"],
    // 跳过库检查
    "skipLibCheck": true,
    // 解析非相对模块名的基准目录
    "baseUrl": ".",
    // 模块名到基于 baseUrl的路径映射的列表
    "paths": {
      "@/*": ["src/*"],
      "#/*": ["types/*"]
    }
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "types/**/*.d.ts",
    "types/**/*.ts",
    "build/**/*.ts",
    "build/**/*.d.ts",
    "mock/**/*.ts",
    "vite.config.ts"
  ],
  "exclude": [
    "node_modules",
    "dist",
    "**/*.js"
  ]
}
